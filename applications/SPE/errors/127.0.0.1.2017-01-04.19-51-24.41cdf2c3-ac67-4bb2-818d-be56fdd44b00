(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.ProgrammingError\'> (1146, u"Table \'SPE.auth_group\' doesn\'t exist")'
p3
sS'layer'
p4
S'/home/francisco/Repositories/USB/SPE/applications/SPE/models/db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\nfrom gluon import current\n\nfrom applications.SPE_lib.modules.db_0_Area_Laboral import Area_Laboral_Table\nfrom applications.SPE_lib.modules.db_0_Area_Proyecto import Area_Proyecto_Table\nfrom applications.SPE_lib.modules.db_0_Categoria import Categoria_Table\nfrom applications.SPE_lib.modules.db_0_Dedicacion import Dedicacion_Table\nfrom applications.SPE_lib.modules.db_0_Division import Division_Table\nfrom applications.SPE_lib.modules.db_0_Etapa import Etapa_Table\nfrom applications.SPE_lib.modules.db_0_Periodo import Periodo_Table\nfrom applications.SPE_lib.modules.db_0_Sede import Sede_Table\nfrom applications.SPE_lib.modules.db_0_Tipo_Documento import Tipo_Documento_Table\nfrom applications.SPE_lib.modules.db_1_Acceso_Etapa import Acceso_Etapa_Table\nfrom applications.SPE_lib.modules.db_1_Accion_Usuario import Accion_Usuario_Table\nfrom applications.SPE_lib.modules.db_1_Coordinacion import Coordinacion_Table\nfrom applications.SPE_lib.modules.db_1_correo_Por_Verificar import correo_por_verificar_Table\nfrom applications.SPE_lib.modules.db_1_Departamento import Departamento_Table\nfrom applications.SPE_lib.modules.db_1_Materia import Materia_Table\nfrom applications.SPE_lib.modules.db_1_Pais import Pais_Table\nfrom applications.SPE_lib.modules.db_1_Universidad import Universidad_Table\nfrom applications.SPE_lib.modules.db_1_UsuarioUSB import UsuarioUSB_Table\nfrom applications.SPE_lib.modules.db_2_Administrativo import Administrativo_Table\nfrom applications.SPE_lib.modules.db_2_Carrera import Carrera_Table\nfrom applications.SPE_lib.modules.db_2_Coordinador import Coordinador_Table\nfrom applications.SPE_lib.modules.db_2_Estado import Estado_Table\nfrom applications.SPE_lib.modules.db_2_Profesor import Profesor_Table\nfrom applications.SPE_lib.modules.db_3_Empresa import Empresa_Table\nfrom applications.SPE_lib.modules.db_3_Estudiante import Estudiante_Table\nfrom applications.SPE_lib.modules.db_3_Tutor_Industrial import Tutor_Industrial_Table\n\nfrom applications.SPE_lib.modules.db_4_Curriculo import Curriculo_Table\nfrom applications.SPE_lib.modules.db_4_Pasantia import Pasantia_Table\nfrom applications.SPE_lib.modules.db_4_Permiso import Permiso_Table\nfrom applications.SPE_lib.modules.db_4_Permiso_Evaluacion import Permiso_Evaluacion_Table\nfrom applications.SPE_lib.modules.db_4_Retiro import Retiro_Table\n\nfrom applications.SPE_lib.modules.db_5_Colocacion import Colocacion_Table\nfrom applications.SPE_lib.modules.db_5_Ejecucion import Ejecucion_Table\nfrom applications.SPE_lib.modules.db_5_Inscripcion import Inscripcion_Table\nfrom applications.SPE_lib.modules.db_5_Plan_Trabajo import Plan_Trabajo_Table\nfrom applications.SPE_lib.modules.db_5_Preinscripcion import Preinscripcion_Table\nfrom applications.SPE_lib.modules.db_5_Calendario import Calendario_Table\n\nfrom applications.SPE_lib.modules.db_6_Fase import Fase_Table\n\nfrom applications.SPE_lib.modules.db_7_Actividad import Actividad_Table\nfrom applications.SPE_lib.modules.db_7_Materia_Periodo import Materia_Periodo_Table\n\nfrom applications.SPE_lib.modules.fixtures import load_fixtures\n# Se importan aqui para no tener que importarlos en el resto del sistema\nfrom Acciones_Usuario import construirAccion as construirAccion\nfrom Usuarios import Usuario\n\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.take('db.uri'), \n      pool_size=myconf.take('db.pool_size', cast=int), check_reserved=['all'],migrate=True)\nelse:\n    ## connect to Google BigTable (optional 'google:datastore://namespace')\n    db = DAL('google:datastore+ndb')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\ncurrent.db = db\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\n# or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.formstyle = myconf.take('forms.formstyle')  \nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager,Mail\n\nSede_Table(db,T)\nTipo_Documento_Table(db,T)\nPais_Table(db,T)\nEstado_Table(db,T)\nauth = Auth(db)\n\nauth.settings.extra_fields['auth_user']= [\n    Field('tipo_documento', 'reference Tipo_Documento',\n          label='Tipo de Documento (*)'),\n    Field('numero_documento',\n          requires=[IS_MATCH('^[0-9][0-9]*$',\n                             error_message='Introduzca una cedula.')],\n          label='Numero Documentacion (*)'),\n    Field('telefono',\n          requires=IS_MATCH('^\\d{4}?[\\s.-]?\\d{7}$',\n                            error_message='Numero no valido,ingrese numero telefonico'),\n          comment='0212-111111',\n          label='Telefono(*)'),\n    Field('direccion', 'text',\n          label='Direccion'),\n    Field('sexo',\n          requires=IS_IN_SET(['M', 'F']),\n          label='Sexo (*)'),\n    Field('activo', 'boolean'),\n    Field('pregunta_secreta', 'text',\n          requires=[IS_NOT_EMPTY\n                    (error_message='Campo necesario')],\n          label='Pregunta Secreta'),\n    Field('respuesta_secreta', 'string',\n          requires=[IS_NOT_EMPTY\n                    (error_message='Campo necesario')],\n          label='Respuesta Secreta'),\n    Field('pais', 'reference Pais',\n          label='Pais'),\n    Field('estado', 'reference Estado',\n          label='Estado'),\n]\n\n\ncurrent.auth = auth\nservice = Service()\nplugins = PluginManager()\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=True, signature=False)\n## configure email\nmail = Mail()\nmail.settings.server = 'smtp.gmail.com:587'\nmail.settings.sender = 'sistemapasantiaEmpresarialusb@gmail.com'\nmail.settings.login = 'sistemapasantiaEmpresarialusb@gmail.com:speusb2016'\nmail.settings.tls = True\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\nauth.enable_record_versioning(db)\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\n# Cargamos Nuestros Modelos\nArea_Laboral_Table(db,T)\nArea_Proyecto_Table(db,T)\nCategoria_Table(db,T)\nDedicacion_Table(db,T)\nDivision_Table(db,T)\nEtapa_Table(db,T)\nPeriodo_Table(db,T)\nAcceso_Etapa_Table(db,T)\nAccion_Usuario_Table(db,T)\nCoordinacion_Table(db,T)\ncorreo_por_verificar_Table(db,T)\nDepartamento_Table(db,T)\nMateria_Table(db,T)\nUniversidad_Table(db,T)\nUsuarioUSB_Table(db,T)\nAdministrativo_Table(db,T)\nCarrera_Table(db,T)\nCoordinador_Table(db,T)\nProfesor_Table(db,T)\nEmpresa_Table(db,T)\nEstudiante_Table(db,T)\nTutor_Industrial_Table(db,T)\nCurriculo_Table(db,T)\nPasantia_Table(db,T)\nPermiso_Table(db,T)\nPermiso_Evaluacion_Table(db,T)\nRetiro_Table(db,T)\nCalendario_Table(db,T)\nColocacion_Table(db,T)\nEjecucion_Table(db,T)\nInscripcion_Table(db,T)\nPlan_Trabajo_Table(db,T)\nPreinscripcion_Table(db,T)\nFase_Table(db,T)\nActividad_Table(db,T)\nMateria_Periodo_Table(db,T)\n# Cargamos La Data Predeterminada\nload_fixtures(db,T)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/francisco/Repositories/USB/SPE/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/francisco/Repositories/USB/SPE/applications/SPE/models/db.py", line 229, in <module>\n    load_fixtures(db,T)\n  File "applications/SPE_lib/modules/fixtures.py", line 3, in load_fixtures\n    if db(db.auth_group.id > 0).count() == 0:\n  File "/home/francisco/Repositories/USB/SPE/gluon/packages/dal/pydal/objects.py", line 2010, in count\n    return db._adapter.count(self.query, distinct)\n  File "/home/francisco/Repositories/USB/SPE/gluon/packages/dal/pydal/adapters/base.py", line 1321, in count\n    self.execute(self._count(query, distinct))\n  File "/home/francisco/Repositories/USB/SPE/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/francisco/Repositories/USB/SPE/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/home/francisco/Repositories/USB/SPE/gluon/contrib/pymysql/cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "/home/francisco/Repositories/USB/SPE/gluon/contrib/pymysql/connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, u"Table \'SPE.auth_group\' doesn\'t exist")\n'
p11
s.